// src/lib/api.ts
export const API_BASE = import.meta.env.VITE_API_BASE ?? "/api";
const BOT = import.meta.env.VITE_BOT_USERNAME || "OGMusicAlbum_Bot";

export const streamUrl = (id: string) => {
  const base = `${API_BASE}/stream/${encodeURIComponent(id)}`;
  const init = getInitData();
  return init ? `${base}?init=${encodeURIComponent(init)}` : base;
};

/** Получить Telegram initData из WebApp/URL, либо пустую строку */
export function getInitData(): string {
  try {
    const w = (window as any);
    const direct = w?.Telegram?.WebApp?.initData;
    if (typeof direct === "string" && direct.length > 0) return direct;

    const fromHash = new URLSearchParams(location.hash.replace(/^#/, "")).get("tgWebAppData");
    if (fromHash) return fromHash;

    const fromSearch = new URLSearchParams(location.search).get("tgWebAppData");
    return fromSearch || "";
  } catch {
    return "";
  }
}

/** Мгновенный перевод пользователя в мини-апп Telegram */
export function ensureTelegramAuth(): never | void {
  const init = getInitData();
  if (init) return; // уже в WebApp — всё ок

  const deeplink = `https://t.me/${BOT}?startapp=app`;
  // пробуем через SDK (если он есть)
  try {
    (window as any)?.Telegram?.WebApp?.openTelegramLink?.(deeplink);
  } catch {}
  // гарантирующий фолбэк
  location.href = deeplink;
  // дальше выполнение не важно
}

/** В DEV мы это больше не используем, но оставлю «пустышку» на всякий */
function getDevHeaders(): Record<string, string> {
  return {};
}

export async function apiGet<T>(
  path: string,
  opts: { timeoutMs?: number } = {}
): Promise<T> {
  const url = path.startsWith("http")
    ? path
    : `${API_BASE}${path.startsWith("/") ? "" : "/"}${path}`;

  const ctrl = new AbortController();
  const timer = setTimeout(() => ctrl.abort(), opts.timeoutMs ?? 15000);

  try {
    const headers: Record<string, string> = { Accept: "application/json" };

    // добавляем Telegram initData, если есть
    const initData = getInitData();
    if (initData) headers["X-Telegram-Init-Data"] = initData;

    Object.assign(headers, getDevHeaders());

    const r = await fetch(url, {
      signal: ctrl.signal,
      credentials: "include",
      headers,
    });

    if (r.status === 401) {
      // нет авторизации — уводим в мини-апп без лишних экранов
      ensureTelegramAuth(); // never | void
      throw new Error("Unauthorized"); // для TypeScript
    }

    if (!r.ok) throw new Error(`HTTP ${r.status} ${r.statusText}`);
    return (await r.json()) as T;
  } finally {
    clearTimeout(timer);
  }
}