# /home/ogma/ogma/app/bot/export_forum_topics.py
#!/usr/bin/env python3
from __future__ import annotations

import os
import html
import asyncio
from typing import Optional, List, Tuple

import asyncpg
from telegram import Bot
from telegram.constants import ParseMode
from telegram.error import TelegramError, TimedOut, RetryAfter, BadRequest
from telegram.request import HTTPXRequest


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ config ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
PG_DSN = os.environ.get("PG_DSN", "postgresql://ogma:ogma_pass@127.0.0.1:5432/ogma")
FORUM_CHAT_ID = int(os.environ["FORUM_CHAT_ID"])  # –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
PUBLIC_BASE = (os.environ.get("PUBLIC_BASE") or "https://ogmusicalbum.online").rstrip(
    "/"
)
SQL_DELETE_USER = "DELETE FROM users WHERE telegram_id=$1;"

TG_MAX = 4000  # –∑–∞–ø–∞—Å –∫ 4096


def esc(s: Optional[str]) -> str:
    return html.escape(s or "")


def make_stream_url(
    chat_username: Optional[str], msg_id: Optional[int]
) -> Optional[str]:
    if not chat_username or not msg_id:
        return None
    return f"{PUBLIC_BASE}/api/stream/by-msg/{msg_id}?chat={chat_username}"


def make_tg_link(chat_username: Optional[str], msg_id: Optional[int]) -> Optional[str]:
    if not chat_username or not msg_id:
        return None
    return f"https://t.me/{chat_username}/{msg_id}"


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ SQL ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
SQL_USERS = """
SELECT telegram_id, username, name, created_at, is_premium
FROM users
ORDER BY telegram_id;
"""

SQL_COUNTS = """
SELECT
  (SELECT COUNT(*) FROM playlists p WHERE p.user_id = $1) AS playlists,
  (SELECT COUNT(*) FROM favorites f WHERE f.user_id = $1) AS favorites,
  (SELECT COALESCE(SUM(seconds),0) FROM listening_seconds ls WHERE ls.user_id = $1) AS listen_seconds
;
"""

SQL_LAST_PLAY = """
SELECT
  t.title,
  array_to_string(t.artists, ', ') AS artists,
  t.chat_username,
  t.tg_msg_id,
  h.ts AS played_at
FROM history h
JOIN tracks t ON t.id = h.track_id
WHERE h.user_id = $1 AND h.action='play'
ORDER BY h.ts DESC
LIMIT 1;
"""

SQL_PLAYLISTS = """
SELECT id, title, is_public, handle
FROM playlists
WHERE user_id = $1
ORDER BY created_at;
"""

SQL_PLAYLIST_ITEMS = """
SELECT
  pi.position,
  t.title,
  array_to_string(t.artists, ', ') AS artists,
  t.chat_username,
  t.tg_msg_id
FROM playlist_items pi
JOIN tracks t ON t.id = pi.track_id
WHERE pi.playlist_id = $1
ORDER BY pi.position;
"""

SQL_TOP_TRACKS_7D = """
SELECT t.title,
       array_to_string(t.artists, ', ') AS artists,
       SUM(ls.seconds)::int AS sec
FROM listening_seconds ls
JOIN tracks t ON t.id = ls.track_id
WHERE ls.user_id = $1
  AND ls.day >= CURRENT_DATE - 7
GROUP BY t.title, t.artists
ORDER BY sec DESC
LIMIT 15;
"""

SQL_TOP_ARTISTS_7D = """
SELECT a.artist,
       SUM(ls.seconds)::int AS sec
FROM listening_seconds ls
JOIN tracks t ON t.id = ls.track_id
CROSS JOIN LATERAL unnest(t.artists) AS a(artist)
WHERE ls.user_id = $1
  AND ls.day >= CURRENT_DATE - 7
GROUP BY a.artist
ORDER BY sec DESC
LIMIT 15;
"""

SQL_UI_PREFS_MAYBE = "SELECT * FROM user_ui_prefs WHERE user_id=$1"

SQL_GET_TOPIC = (
    "SELECT forum_chat_id, thread_id, title FROM forum_topics WHERE user_id=$1;"
)
SQL_INS_TOPIC = """
INSERT INTO forum_topics (user_id, forum_chat_id, thread_id, title)
VALUES ($1,$2,$3,$4)
ON CONFLICT (user_id) DO UPDATE
  SET forum_chat_id=EXCLUDED.forum_chat_id,
      thread_id=EXCLUDED.thread_id,
      title=EXCLUDED.title,
      updated_at=now();
"""

SQL_GET_POST = (
    "SELECT message_id FROM forum_topic_posts WHERE user_id=$1 AND post_type=$2;"
)
SQL_UPSERT_POST = """
INSERT INTO forum_topic_posts (user_id, post_type, message_id)
VALUES ($1,$2,$3)
ON CONFLICT (user_id, post_type) DO UPDATE SET message_id=EXCLUDED.message_id;
"""


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ render helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def build_profile_text(
    con: asyncpg.Connection, uid: int, username: Optional[str], name: Optional[str]
) -> str:
    counts = await con.fetchrow(SQL_COUNTS, uid)
    last = await con.fetchrow(SQL_LAST_PLAY, uid)

    lines = []
    title = f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {('@'+username) if username else '(–±–µ–∑ username)'}"
    lines.append(f"<b>{esc(title)}</b>")
    lines.append(f"ID: <code>{uid}</code>")
    if name:
        lines.append(f"–ò–º—è: {esc(name)}")
    lines.append("")
    lines.append(f"–ü–ª–µ–π–ª–∏—Å—Ç–æ–≤: <b>{counts['playlists']}</b>")
    lines.append(f"–ò–∑–±—Ä–∞–Ω–Ω–æ–µ (–≤ \"–ú–æ–π –ø–ª–µ–π–ª–∏—Å—Ç\"): <b>{counts['favorites']}</b>")
    lines.append(f"–°–µ–∫—É–Ω–¥ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è (–≤—Å–µ–≥–æ): <b>{counts['listen_seconds']}</b>")

    if last:
        su = make_stream_url(last["chat_username"], last["tg_msg_id"])
        tu = make_tg_link(last["chat_username"], last["tg_msg_id"])
        tail = []
        if su:
            tail.append(f'<a href="{esc(su)}">‚ñ∂Ô∏è stream</a>')
        if tu:
            tail.append(f'<a href="{esc(tu)}">TG</a>')
        tail_txt = ("  " + " | ".join(tail)) if tail else ""
        lines.append("")
        lines.append("<i>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ:</i>")
        lines.append(f"‚Ä¢ {esc(last['title'])} ‚Äî {esc(last['artists'])}{tail_txt}")

    return "\n".join(lines)[:TG_MAX]


async def build_playlists_text(con: asyncpg.Connection, uid: int) -> List[str]:
    pls = await con.fetch(SQL_PLAYLISTS, uid)
    if not pls:
        return ["<b>–ü–ª–µ–π–ª–∏—Å—Ç—ã</b>\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤."]

    header = ["<b>–ü–ª–µ–π–ª–∏—Å—Ç—ã</b>"]
    chunks: List[str] = []
    cur = "\n".join(header) + "\n"

    for p in pls:
        line_pl = f"\n<b>{esc(p['title'])}</b>  {'(–ø—É–±–ª–∏—á–Ω—ã–π)' if p['is_public'] else '(–ø—Ä–∏–≤–∞—Ç–Ω—ã–π)'}"
        handle = p.get("handle")
        if handle:
            line_pl += f"  <code>/{esc(handle)}</code>"

        if len(cur) + len(line_pl) > TG_MAX:
            chunks.append(cur)
            cur = ""

        cur += line_pl + "\n"

        items = await con.fetch(SQL_PLAYLIST_ITEMS, p["id"])
        if not items:
            cur += "  ‚Äî –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤\n"
            continue

        for it in items:
            su = make_stream_url(it["chat_username"], it["tg_msg_id"])
            tu = make_tg_link(it["chat_username"], it["tg_msg_id"])
            tail = []
            if su:
                tail.append(f'<a href="{esc(su)}">‚ñ∂Ô∏è</a>')
            if tu:
                tail.append(f'<a href="{esc(tu)}">TG</a>')
            tail_txt = (" " + " ".join(tail)) if tail else ""
            line_tr = f"  {it['position']:>2}. {esc(it['title'])} ‚Äî {esc(it['artists'])}{tail_txt}\n"

            if len(cur) + len(line_tr) > TG_MAX:
                chunks.append(cur)
                cur = ""
            cur += line_tr

    if cur.strip():
        chunks.append(cur)
    return chunks or ["<b>–ü–ª–µ–π–ª–∏—Å—Ç—ã</b>\n‚Äî"]


async def build_backgrounds_text(con: asyncpg.Connection, uid: int) -> str:
    try:
        prefs = await con.fetch(SQL_UI_PREFS_MAYBE, uid)
    except Exception:
        prefs = []

    lines = ["<b>–§–æ–Ω—ã/–æ–±–ª–æ–∂–∫–∏</b>"]
    if not prefs:
        lines.append("–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ñ–æ–Ω–∞ –≤ –ë–î.")
        return "\n".join(lines)

    shown = 0
    for r in prefs:
        pairs = "  ".join(
            f"{esc(str(k))}: <code>{esc(str(v))}</code>" for k, v in dict(r).items()
        )
        lines.append(f"‚Ä¢ {pairs}")
        shown += 1
        if len("\n".join(lines)) > TG_MAX:
            break
    if shown == 0:
        lines.append("–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ñ–æ–Ω–∞ –≤ –ë–î.")
    return "\n".join(lines)[:TG_MAX]


async def build_stats_text(con: asyncpg.Connection, uid: int) -> str:
    top_tr = await con.fetch(SQL_TOP_TRACKS_7D, uid)
    top_ar = await con.fetch(SQL_TOP_ARTISTS_7D, uid)
    lines = ["<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π</b>"]

    lines.append("\n<i>–¢—Ä–µ–∫–∏ –ø–æ —Å–µ–∫—É–Ω–¥–∞–º</i>")
    if not top_tr:
        lines.append("‚Äî –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç")
    else:
        for i, r in enumerate(top_tr, 1):
            lines.append(
                f"{i:>2}. {esc(r['title'])} ‚Äî {esc(r['artists'])}  <code>{r['sec']}s</code>"
            )
            if len("\n".join(lines)) > TG_MAX:
                break

    lines.append("\n<i>–ê—Ä—Ç–∏—Å—Ç—ã –ø–æ —Å–µ–∫—É–Ω–¥–∞–º</i>")
    if not top_ar:
        lines.append("‚Äî –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç")
    else:
        for i, r in enumerate(top_ar, 1):
            lines.append(f"{i:>2}. {esc(r['artist'])}  <code>{r['sec']}s</code>")
            if len("\n".join(lines)) > TG_MAX:
                break
    return "\n".join(lines)[:TG_MAX]


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ forum topics/posts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def ensure_user_topic(
    bot: Bot,
    con: asyncpg.Connection,
    uid: int,
    username: Optional[str],
    name: Optional[str],
) -> Tuple[int, str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (thread_id, –∞–∫—Ç—É–∞–ª—å–Ω—ã–π_–∑–∞–≥–æ–ª–æ–≤–æ–∫). –ï—Å–ª–∏ —Ç–µ–º—ã –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë—Ç."""
    # –∂–µ–ª–∞–µ–º—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏
    base = (
        f"üë§ @{username}"
        if username
        else (f"üë§ {(name or '').strip()[:24]} ‚Äî id{uid}" if name else f"üë§ id{uid}")
    )
    desired_title = base[:128]

    row = await con.fetchrow(SQL_GET_TOPIC, uid)
    if row:
        thread_id = int(row["thread_id"])
        current_title = row["title"] or ""
        # –µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è ‚Äî –ø–µ—Ä–µ–∏–º–µ–Ω—É–µ–º —Ç–µ–º—É
        if current_title != desired_title:
            try:
                await bot.edit_forum_topic(
                    FORUM_CHAT_ID, message_thread_id=thread_id, name=desired_title
                )
                await con.execute(
                    SQL_INS_TOPIC, uid, FORUM_CHAT_ID, thread_id, desired_title
                )
            except TelegramError:
                pass  # –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏–º —Å–æ —Å—Ç–∞—Ä—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        return thread_id, desired_title

    # —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Ç–µ–º—É
    for attempt in range(3):
        try:
            ft = await bot.create_forum_topic(FORUM_CHAT_ID, name=desired_title)
            thread_id = int(ft.message_thread_id)
            await con.execute(
                SQL_INS_TOPIC, uid, FORUM_CHAT_ID, thread_id, desired_title
            )
            return thread_id, desired_title
        except RetryAfter as e:
            await asyncio.sleep(int(getattr(e, "retry_after", 3)) + 1)
        except TimedOut:
            await asyncio.sleep(3 * (attempt + 1))
        except TelegramError as e:
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ–º—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}: {e}")
    raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ–º—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}: —Ç–∞–π–º–∞—É—Ç")


async def upsert_post(
    bot: Bot,
    con: asyncpg.Connection,
    uid: int,
    thread_id: int,
    post_type: str,
    text: str,
):
    assert post_type in {"profile", "playlists", "backgrounds", "stats"}
    row = await con.fetchrow(SQL_GET_POST, uid, post_type)

    if row:
        msg_id = int(row["message_id"])
        for attempt in range(2):
            try:
                await bot.edit_message_text(
                    chat_id=FORUM_CHAT_ID,
                    message_id=msg_id,
                    text=text,
                    parse_mode=ParseMode.HTML,
                    disable_web_page_preview=True,
                )
                return
            except BadRequest as e:
                # —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–≥–ª–∏ —É–¥–∞–ª–∏—Ç—å -> –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ
                break
            except TelegramError:
                await asyncio.sleep(1 + attempt)

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–Ω–æ–≤–æ
    for attempt in range(3):
        try:
            sent = await bot.send_message(
                chat_id=FORUM_CHAT_ID,
                message_thread_id=thread_id,
                text=text,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True,
            )
            await con.execute(SQL_UPSERT_POST, uid, post_type, int(sent.message_id))
            return
        except RetryAfter as e:
            await asyncio.sleep(int(getattr(e, "retry_after", 3)) + 1)
        except BadRequest as e:
            # –µ—Å–ª–∏ —Ç–µ–º—ã –±–æ–ª—å—à–µ –Ω–µ—Ç ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ: —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ü–µ–ª–∏–∫–æ–º
            if "message thread not found" in str(e).lower():
                await con.execute(SQL_DELETE_USER, uid)
                print(f"[del] —É–¥–∞–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid}: —Ç–µ–º–∞ {thread_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                return
            raise
        except TimedOut:
            await asyncio.sleep(2)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ main export ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def _init_bot() -> Bot:
    if not BOT_TOKEN:
        raise RuntimeError("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
    # –¥–ª–∏–Ω–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è systemd-–æ–∫—Ä—É–∂–µ–Ω–∏—è (–∏–Ω–æ–≥–¥–∞ IPv6/–º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è)
    req = HTTPXRequest(
        connect_timeout=20.0,
        read_timeout=60.0,
        write_timeout=20.0,
        pool_timeout=20.0,
        http_version="1.1",
    )
    bot = Bot(BOT_TOKEN, request=req)
    # —Ä—É—á–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å —Ä–µ—Ç—Ä–∞—è–º–∏
    for attempt in range(3):
        try:
            await bot.initialize()
            return bot
        except TimedOut:
            await asyncio.sleep(3 * (attempt + 1))
    # –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –≤–µ—Ä–Ω—ë–º –±–æ—Ç, –º–Ω–æ–≥–∏–µ –º–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∏ –±–µ–∑ get_me
    return bot


async def export_all(dry_run: bool = False, only_user: Optional[int] = None):
    pool = await asyncpg.create_pool(dsn=PG_DSN, min_size=1, max_size=5)
    async with pool.acquire() as con:
        users = await con.fetch(SQL_USERS)
    if only_user:
        users = [u for u in users if int(u["telegram_id"]) == only_user]

    print(f"[i] –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ —ç–∫—Å–ø–æ—Ä—Ç—É: {len(users)}")
    if dry_run:
        for u in users:
            print(f"  - would export user {u['telegram_id']} @{u['username'] or ''}")
        await pool.close()
        return

    bot = await _init_bot()
    try:
        for u in users:
            uid = int(u["telegram_id"])
            uname = u["username"]
            name = u["name"]

            async with pool.acquire() as con:
                try:
                    thread_id, title = await ensure_user_topic(
                        bot, con, uid, uname, name
                    )
                    print(
                        f"[ok] —Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è {uid} ({title}), thread_id={thread_id}"
                    )
                except RuntimeError as e:
                    print(f"[skip] {uid} @{uname or ''}: {e}")
                    await asyncio.sleep(2)
                    continue

                profile_txt = await build_profile_text(con, uid, uname, name)
                await upsert_post(bot, con, uid, thread_id, "profile", profile_txt)

                playlists_chunks = await build_playlists_text(con, uid)
                await upsert_post(
                    bot, con, uid, thread_id, "playlists", playlists_chunks[0]
                )
                for extra in playlists_chunks[1:]:
                    # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫—É—Å–∫–∏ –±–µ–∑ —É—á—ë—Ç–∞ –≤ forum_topic_posts
                    for attempt in range(3):
                        try:
                            await bot.send_message(
                                chat_id=FORUM_CHAT_ID,
                                message_thread_id=thread_id,
                                text=extra,
                                parse_mode=ParseMode.HTML,
                                disable_web_page_preview=True,
                            )
                            break
                        except RetryAfter as e:
                            await asyncio.sleep(int(getattr(e, "retry_after", 3)) + 1)
                        except TimedOut:
                            await asyncio.sleep(2)

                bgs_txt = await build_backgrounds_text(con, uid)
                await upsert_post(bot, con, uid, thread_id, "backgrounds", bgs_txt)

                stats_txt = await build_stats_text(con, uid)
                await upsert_post(bot, con, uid, thread_id, "stats", stats_txt)

                await asyncio.sleep(0.5)  # –ª—ë–≥–∫–∏–π —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥
    finally:
        try:
            await bot.shutdown()
        except Exception:
            pass
        await pool.close()
    print("[‚úì] —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω")


if __name__ == "__main__":
    import argparse

    ap = argparse.ArgumentParser(
        description="–≠–∫—Å–ø–æ—Ä—Ç/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä—É–º-—Ç–µ–º –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
    )
    ap.add_argument(
        "--dry-run",
        action="store_true",
        help="–Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ Telegram, —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω",
    )
    ap.add_argument(
        "--user", type=int, help="—ç–∫—Å–ø–æ—Ä—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ user_id (telegram_id)"
    )
    args = ap.parse_args()

    asyncio.run(export_all(dry_run=args.dry_run, only_user=args.user))
