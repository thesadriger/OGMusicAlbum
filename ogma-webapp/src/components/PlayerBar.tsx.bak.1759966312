import { useEffect, useRef, useState } from "react";
import { streamUrl } from "@/lib/api";
import type { Track } from "@/types";

export function PlayerBar({ now }: { now: Track | null }) {
  const audioRef = useRef<HTMLAudioElement | null>(null);
  const [pos, setPos] = useState(0);

  useEffect(() => {
    if (!audioRef.current) return;
    const a = audioRef.current;
    const onTime = () => setPos(a.currentTime);
    a.addEventListener("timeupdate", onTime);
    return () => a.removeEventListener("timeupdate", onTime);
  }, []);

  useEffect(() => {
    if (!audioRef.current || !now) return;
    const a = audioRef.current;
    a.src = streamUrl(now.id);
    a.play().catch(() => {/* autoplay guard */});
  }, [now?.id]);

  return (
    <div className="fixed inset-x-0 bottom-0 border-t bg-white/80 dark:bg-zinc-950/80 backdrop-blur p-3">
      <audio ref={audioRef} controls className="w-full" />
      {now && (
        <div className="mt-1 text-sm text-zinc-600 dark:text-zinc-400 truncate">
          ▶ {now.title} — {now.artists?.join(", ")} · {Math.round(pos)}s
        </div>
      )}
    </div>
  );
}
